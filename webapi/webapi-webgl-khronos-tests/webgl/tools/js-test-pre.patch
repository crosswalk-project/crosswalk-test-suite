--- js-test-pre.orig.js	2015-06-18 23:26:41
+++ js-test-pre.js	2016-06-17 14:46:34
@@ -20,6 +20,24 @@
 ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 */
+var caseName = document.title;
+var subcaseIndex = 1;
+
+function KhronosTest(name) {
+  this.name = name;
+  this.status = null;
+  this.message = null;
+}
+
+var khronosTests = [];
+
+function Status() {
+  this.status = null;
+  this.message = null;
+}
+
+var statusObj = new Status();
+statusObj.status = 0;
 
 (function() {
   var testHarnessInitialized = false;
@@ -78,6 +96,32 @@ function reportTestResultsToHarness(success, msg) {
 }
 
 function notifyFinishedToHarness() {
+  if (window.parent.completion_callback) {
+    var notifyResult = [];
+    var caseName = document.title;
+    if (caseName.length === 0) {
+      fileName = window.location.href;
+      arrUrl  = window.location.href.split('/');
+      caseName = arrUrl[arrUrl.length-1].split('\.')[0];
+    }
+    var ktestNotify = new KhronosTest(caseName);
+    ktestNotify.status = 0;
+    var msg = "[Message]";
+    for (var i=0;i<khronosTests.length;i++) {
+      var kt = khronosTests[i] ;
+      var ktStatus = kt.status;
+      if (ktStatus===1) {
+        ktestNotify.status = 1;
+        msg += "[assert]fail[message]*FAIL " + kt.message + "\n";
+      }
+      else {
+        msg += "[assert]pass[message]*PASS " + kt.message + "\n";
+      }
+    }
+    ktestNotify.message = msg;
+    notifyResult.push(ktestNotify);
+    window.parent.completion_callback(notifyResult, statusObj);
+  }
   if (window.parent.webglTestHarness) {
     window.parent.webglTestHarness.notifyFinished(window.location.pathname);
   }
   if (window.nonKhronosFrameworkNotifyDone) {
    window.nonKhronosFrameworkNotifyDone();
  }
}

function _logToConsole(msg)
{
    if (window.console)
      window.console.log(msg);
}

var _jsTestPreVerboseLogging = false;

function enableJSTestPreVerboseLogging()
{
    _jsTestPreVerboseLogging = true;
}

function description(msg)
{
    initTestingHarness();
    if (msg === undefined) {
      msg = document.title;
    }
+    else {
+      if (document.title.length === 0) {
+        caseName = msg;
+      }
+    }
+
     // For MSIE 6 compatibility
     var span = document.createElement("span");
     span.innerHTML = '<p>' + msg + '</p><p>On success, you will see a series of "<span class="pass">PASS</span>" messages, followed by "<span class="pass">TEST COMPLETE</span>".</p>'; 
     var description = document.getElementById("description");
    if (description.firstChild)
        description.replaceChild(span, description.firstChild);
    else
        description.appendChild(span);
    if (_jsTestPreVerboseLogging) {
        _logToConsole(msg);
    }
}

function _addSpan(contents)
{
    var span = document.createElement("span");
    document.getElementById("console").appendChild(span); // insert it first so XHTML knows the namespace
    span.innerHTML = contents + '<br />';
}

function debug(msg)
{
    _addSpan(msg);
    if (_jsTestPreVerboseLogging) {
	_logToConsole(msg);
    }
}

function escapeHTML(text)
{
    return text.replace(/&/g, "&amp;").replace(/</g, "&lt;");
}

function testPassed(msg)
{
+    if (msg !== "successfullyParsed is true") {
+      var ktest = new KhronosTest(caseName + "/" + subcaseIndex);
+      ktest.status = 0;
+      ktest.message = escapeHTML(msg);
+      khronosTests.push(ktest);
+      subcaseIndex++;
+    }
+
     reportTestResultsToHarness(true, msg);
     _addSpan('<span><span class="pass">PASS</span> ' + escapeHTML(msg) + '</span>');
     if (_jsTestPreVerboseLogging) {
         _logToConsole('PASS ' + msg);
    }
}

function testFailed(msg)
{
+    if (msg.indexOf("successfullyParsed should be true") === -1) {
+        var ktest = new KhronosTest(caseName + "/" + subcaseIndex);
+        ktest.status = 1;
+        ktest.message = escapeHTML(msg);
+        khronosTests.push(ktest);
+        subcaseIndex++;
+    }
+
     reportTestResultsToHarness(false, msg);
     _addSpan('<span><span class="fail">FAIL</span> ' + escapeHTML(msg) + '</span>');
     _logToConsole('FAIL ' + msg);
